code_snippet,has_security_issues
"module out_of_bounds_write;
reg [7:0] array [0:9];
integer i;

initial begin
for (i = 0; i < 10; i = i + 1) begin
array[i] = i;
end

array[10] = 42;

for (i = 0; i < 10; i = i + 1) begin
$display(""array[%0d] = %0d"", i, array[i]);
end

$display(""Out-of-bounds write: array[10] = %0d"", array[10]);
end
endmodule",yes
"module test;

int my_array[5];

initial begin
my_array[7] = 10; // Out-of-bounds write
end

endmodule
",
"typedef enum {NOA, TIE_H, TIE_L} sig_type_t;
sig_type_t sig_type[8];
sig_type = new();

// Assigning values to array elements
sig_type[0] = TIE_H; // This is OK
sig_type[7] = TIE_L; // This is fine too
sig_type[8] = TIE_H; // sig_type[8] is out of range and will get NOA instead of TIE_H

// Explanation:
// - When assigning to sig_type[8], it's out of bounds (valid indices are 0 to 7).
// - SystemVerilog initializes the out-of-range element to 0 (NOA in this case).

// Note: Verilog does not perform compile-time or run-time checks for out-of-bounds assignments.
// It behaves similarly to hardware, where out-of-range writes are ignored.

// To avoid this issue, use dynamic arrays or ensure your index is within bounds.
",
"module sql_injection_example;
string user_input;
string query;

initial begin
// Simulate user input that includes SQL injection
user_input = ""'; DROP TABLE users; --"";

// Create SQL query with improper neutralization of user input
query = { ""SELECT * FROM users WHERE username = '"", user_input, ""';"" };

// Display the query
$display(""SQL Query: %s"", query);

// Hypothetical database query execution (for demonstration purposes)
// In a real environment, this would execute the query against a database
// execute_query(query);
end
endmodule
",yes
"class my_class;
variant my_var;
int data1;
real data2;
endvariant

function void some_function();
my_var = new();
my_var.data1 = 10;

// Some code...

delete my_var; // Variant deallocated

// Error: Using my_var after it's been deallocated
$display(""my_var.data1 = %0d"", my_var.data1);
endfunction
endclass
",
"module os_command_injection_example;
string user_input;
string command;

initial begin
// Simulate user input that includes malicious OS command
user_input = ""test.txt; rm -rf /"";

// Construct the OS command with improper neutralization of user input
command = { ""ls "", user_input };

// Display the command to be executed
$display(""OS Command: %s"", command);

// Hypothetical OS command execution (for demonstration purposes)
// In a real environment, this would execute the command in the OS shell
// system(command);
end
endmodule",yes
"module CommandInjectionExample;
string logFile;

// Assume logFile is set based on user input or other external sources

// Validate logFile to prevent command injection
function bit validateLogFile(string logFile);
// Implement your validation logic here
// For example, check if logFile contains only valid characters
// and doesn't include any special characters that could be used for injection
// Return 1 if valid, 0 otherwise
endfunction

initial begin
// ...

if (validateLogFile(logFile)) begin
// Execute the command (e.g., open the log file)
$system(""notepad.exe "" + logFile);
end else begin
$display(""Invalid log file selected."");
// Handle the error appropriately
end

// ...
end
endmodule
",yes
"module improper_input_validation_example;
int user_input;
int array[10];
int i;

initial begin
// Initialize the array with some values
for (i = 0; i < 10; i = i + 1) begin
array[i] = i;
end

// Simulate user input without validation
user_input = 15; // This value is intentionally out of valid range

// Use the user input as an array index without proper validation
$display(""Accessing array with user input:"");
$display(""array[%0d] = %0d"", user_input, array[user_input]);
end
endmodule
",yes
"class UserData;
string username;
string password;

// Assume these are set based on user input or other external sources

function void displayUserInfo();
$display(""Username: %s, Password: %s"", username, password);
endfunction
endclass

module Test;
UserData user;

initial begin
// For demonstration purposes, assume user input
user = new;
user.username = ""admin"";
user.password = ""secret123"";

// Display user info (vulnerable to improper input validation)
user.displayUserInfo();
end
endmodule
",yes
"class my_class;
int data;

function void set_data(input int value);
data = value; // No input validation
endfunction
endclass",yes
"module OutOfBoundsReadExample;
reg [7:0] myArray [0:3]; // A 4-element array of 8-bit values

initial begin
// Assume myArray is populated with some data
// For demonstration purposes, let's access an out-of-bounds index
myArray[4] = 8'b10101010; // Writing to index 4 (out of bounds)

// Attempt to read from an out-of-bounds index
$display(""Value at index 4: %b"", myArray[4]); // Out-of-bounds read
end
endmodule
",yes
"module out_of_bounds_read_example;
int array[10];
int i;

initial begin
// Initialize the array with some values
for (i = 0; i < 10; i = i + 1) begin
array[i] = i * 10;
end

// Attempt to read from an out-of-bounds index
i = 15; // Index is out of bounds (valid range: 0-9)
$display(""Attempting to read from index %0d"", i);
$display(""array[%0d] = %0d"", i, array[i]);
end
endmodule",yes
"module test;

int my_array[5];

initial begin
int i;
for (i = 0; i <= 5; i++) begin // Error: index out of bounds for i = 5
$display(""my_array[%0d] = %0d"", i, my_array[i]);
end
end

endmodule
",
"module FileReader;
string filename;

initial begin
// Assume 'filename' is set based on user input
// For demonstration purposes, let's assume the user input is ""../secret_file.txt""
filename = $sformatf(""../%s"", ""secret_file.txt"");

// Construct the full path
string full_path = $sformatf(""%s/%s"", $system(""pwd""), filename);

// Attempt to open the file
$fopen(full_path, ""r"");
if ($feof) begin
$display(""Error - file not found"");
end else begin
// Read the file data
// ...
$fclose;
end
end
endmodule",yes
"module path_traversal_example;
string user_input;
string base_path;
string file_path;
int file;
byte data[128];

initial begin
// Base directory (simulated)
base_path = ""/home/user/documents/"";

// Simulate user input that includes path traversal sequences
user_input = ""../etc/passwd""; // Path traversal input

// Construct the file path
file_path = { base_path, user_input };

// Display the file path
$display(""File Path: %s"", file_path);

// Attempt to open the file (hypothetical, not actual file operations)
// file = $fopen(file_path, ""r""); // This would attempt to open a file
// if (file) begin
// $fread(data, file);
// $fclose(file);
// end else begin
// $display(""Failed to open file: %s"", file_path);
// end
end
endmodule
",
"module FileUploader #(parameter int FILE_SIZE_MAX = 1024)
(
input logic clk,
input logic reset,
input logic start,
input logic [31:0] file_path_addr,
output logic done
);

logic [FILE_SIZE_MAX-1:0] file_data;

// ... other signals and logic ...

always_ff @(posedge clk) begin
if (reset) begin
// Reset logic
end else begin
if (start) begin
// Read file from file_path_addr into file_data
// No file type validation or sanitization
end
// ... process file_data ...
end
end

endmodule
",
"module unrestricted_file_upload_example;
string file_name;
string file_data;

initial begin
// Simulate file upload
file_name = ""malicious.exe""; // Dangerous file type
file_data = ""binary data of the file""; // Simulated file content

// Accept the file upload without validation
$display(""Uploading file: %s"", file_name);
// Hypothetical function to save the file (not actually implemented)
save_file(file_name, file_data);
$display(""File uploaded successfully."");
end

// Hypothetical function to save the file (for demonstration purposes)
function void save_file(string name, string data);
// In a real scenario, this function would save the file to the file system
$display(""Saving file: %s with data: %s"", name, data);
endfunction
endmodule
",
"class tx;
pkt p;
int j;

function new(pkt p);
p = new();
j = 10;
endfunction

task copy(pkt p);
this.p = new p;
endtask
endclass : tx

initial begin
tx t1, t2;
pkt p;

t1 = new();
p = new();
p.i = 256;
t2 = new t1;
t2.j = 20;
t2.copy(p);

$display(t1.j); // Output: 10
$display(t2.j); // Output: 20
$display(p.i); // Output: 256
$display(t1.p.i); // Output: 256
$display(t2.p.i); // Error: NULL pointer dereference
t1.p.i = 221;
$display(t1.p.i); // Output: 221
$display(t2.p.i); // Error: NULL pointer dereference
end
",
"class MyClass;
int dyn_array[$];

function new(int size);
dyn_array = new[size];
endfunction

task access_element(int index);
// If dyn_array is not properly initialized or index is out of bounds,
// this will lead to a null pointer dereference-like issue
int value = dyn_array[index];
endtask
endclass
",
"module null_pointer_dereference_example;
int *ptr;

initial begin
// Attempt to use the pointer without initialization
$display(""Pointer value: %0d"", ptr);
$display(""Dereferencing pointer..."");
*ptr = 10; // This will cause a NULL pointer dereference
$display(""Pointer dereferenced value: %0d"", *ptr);
end
endmodule
",
"module base_integer_overflow_example;

// 4-bit unsigned integer
logic [3:0] a;
logic [3:0] b;
logic [3:0] result;

initial begin
a = 4'b1010; // 10 in decimal
b = 4'b0110; // 6 in decimal

// Performing addition that causes overflow
result = a + b; // Expected result is 16, but will overflow in 4-bit representation

$display(""a = %d, b = %d, result = %d"", a, b, result);
// This will display: a = 10, b = 6, result = 0
// The addition result overflows the 4-bit limit and wraps around to 0
end

endmodule
",
"class Test;
rand bit [3:0] a;
rand bit [3:0] b;
constraint c { a + b <= 4'h6; }
endclass;
",
"module test;

int a = 32'hffff_ffff; // Maximum 32-bit integer value
int b = 1;

initial begin
int c = a + b; // Integer overflow
$display(""c = %h"", c);
end

endmodule
",
"class Test;
rand bit [3:0] a;
rand bit [3:0] b;
constraint c { a + b <= 4'h6; }
endclass;
",
"module base_integer_overflow_example;

// 4-bit unsigned integer
logic [3:0] a;
logic [3:0] b;
logic [3:0] result;

initial begin
a = 4'b1010; // 10 in decimal
b = 4'b0110; // 6 in decimal

// Performing addition that causes overflow
result = a + b; // Expected result is 16, but will overflow in 4-bit representation

$display(""a = %d, b = %d, result = %d"", a, b, result);
// This will display: a = 10, b = 6, result = 0
// The addition result overflows the 4-bit limit and wraps around to 0
end

endmodule",
"class my_class;
int queue[$];

function void push(int data);
queue.push_back(data); // Assuming no size limit check
endfunction
endclass
",
"module test;

int my_array[5];

initial begin
for (int i = 0; i <= 5; i++) begin // Incorrect loop condition
my_array[i] = i; // Accessing beyond array bounds
end
end

endmodule
\",
"class SharedResource;
int count;

function new();
count = 0;
endfunction

function void increment();
count++;
endfunction

function int get_count();
return count;
endfunction
endclass

module race_condition_example;
SharedResource shared_resource;

initial begin
shared_resource = new;

// Spawn multiple processes to increment the shared resource
fork
increment_task();
increment_task();
join

// Display the count
$display(""Final count: %0d"", shared_resource.get_count());
end

task increment_task();
int i;
for (i = 0; i < 1000; i++) begin
shared_resource.increment();
end
endtask
endmodule
",
"# Assume 'balance' is a shared variable representing a bank account balance
# Thread 1 (T1):
def withdraw(amount):
global balance
if balance >= amount:
balance -= amount
print(f""Withdrew ${amount}. New balance: ${balance}"")
else:
print(""Insufficient funds"")

# Thread 2 (T2):
def deposit(amount):
global balance
balance += amount
print(f""Deposited ${amount}. New balance: ${balance}"")

# Simultaneous execution:
# T1: withdraw(100)
# T2: deposit(200)
",
"module test;
bit [7:0] data;

initial begin
data[8] = 1; // Accessing beyond data width
end
endmodule
",
"class my_class;
int queue[$];

function void push(int data);
queue.push_back(data); // Assuming no size limit check
endfunction
endclass
",
"module test;
int my_array[5];

initial begin
for (int i = 0; i <= 5; i++) begin // Incorrect loop condition
my_array[i] = i; // Accessing beyond array bounds
end
end
endmodule
",
"module test;
logic [7:0] data;

initial begin
data = 8'hff; // Assigning a value outside the bit width
end
endmodule",
,
,
,
,
"module out_of_bounds_read_example_fixed;
int array[10];
int i;

initial begin
// Initialize the array with some values
for (i = 0; i < 10; i = i + 1) begin
array[i] = i * 10;
end

// Attempt to read from a validated index
i = 15; // Index is intentionally out of bounds for demonstration
if (i >= 0 && i < 10) begin
$display(""Reading from index %0d"", i);
$display(""array[%0d] = %0d"", i, array[i]);
end else begin
$display(""Error: Index %0d is out of bounds."", i);
end
end
endmodule
",
"module proper_input_validation_example;
int user_input;
int array[10];
int i;

initial begin
// Initialize the array with some values
for (i = 0; i < 10; i = i + 1) begin
array[i] = i;
end

// Simulate user input
user_input = 15; // This value is intentionally out of valid range

// Validate user input
if (user_input >= 0 && user_input < 10) begin
$display(""Accessing array with user input:"");
$display(""array[%0d] = %0d"", user_input, array[user_input]);
end else begin
$display(""Invalid input: %0d. Index out of bounds."", user_input);
end
end
endmodule
",
"module os_command_injection_example_fixed;
string user_input;
string command;
string sanitized_input;

function string sanitize_input(string input);
// Reject input containing unsafe characters
if (input.find("";"") != -1 || input.find(""&"") != -1 || input.find(""|"") != -1 || input.find("">"") != -1 || input.find(""<"") != -1) begin
return """";
end
return input;
endfunction

initial begin
user_input = ""test.txt; rm -rf /"";
sanitized_input = sanitize_input(user_input);

if (sanitized_input == """") begin
$display(""Invalid input detected, command execution aborted."");
end else begin
command = { ""ls "", sanitized_input };

$display(""Sanitized OS Command: %s"", command);

// Hypothetical OS command execution (for demonstration purposes)
// In a real environment, this would execute the command in the OS shell
// system(command);
end
end
endmodule",
"module path_traversal_example_fixed;
string user_input;
string base_path;
string file_path;
int file;
byte data[128];

function string sanitize_path(string path);
// Replace any path traversal sequences with empty strings
path = path.replace(""../"", """"); // Simple example; adjust as needed
return path;
endfunction

initial begin
base_path = ""/home/user/documents/"";

// Simulate user input
user_input = ""../etc/passwd""; // Path traversal input

// Sanitize the user input
user_input = sanitize_path(user_input);

// Construct the file path
file_path = { base_path, user_input };

// Display the sanitized file path
$display(""Sanitized File Path: %s"", file_path);

// Attempt to open the file (hypothetical, not actual file operations)
// file = $fopen(file_path, ""r""); // This would attempt to open a file
// if (file) begin
// $fread(data, file);
// $fclose(file);
// end else begin
// $display(""Failed to open file: %s"", file_path);
// end
end
endmodule
",
"module csrf_example_fixed;
string user_token;
string request_token;
string action;
string valid_token;

function bit validate_token(string token);
return (token == valid_token);
endfunction

initial begin
// Simulate a valid token (in a real application, this would be dynamically generated and verified)
valid_token = ""123456"";
user_token = ""123456"";

// Simulate an action request from a user (e.g., changing user settings)
action = ""change_email?email=attacker@example.com&token=123456"";

// Extract token from the action request
request_token = action.extract(action.find(""token="") + 6, 6);

// Process the action request with proper token validation
$display(""Processing action: %s"", action);
if (validate_token(request_token)) begin
$display(""Action processed successfully."");
end else begin
$display(""Invalid token. Action request denied."");
end
end
endmodule
",
"// ... (include necessary headers for file operations and string manipulation)

module FileUploader #(parameter int FILE_SIZE_MAX = 1024)
(
// ... inputs and outputs ...
);

logic [FILE_SIZE_MAX-1:0] file_data;
string file_type;

// ... other signals and logic ...

always_ff @(posedge clk) begin
if (reset) begin
// Reset logic
end else begin
if (start) begin
// Get file type (e.g., using file extension or content analysis)
file_type = get_file_type(file_path_addr);

// Validate file type
if (file_type == ""allowed_type1"" || file_type == ""allowed_type2"") begin
// Read file content with appropriate size checking and error handling
if (read_file(file_path_addr, file_data, FILE_SIZE_MAX) == SUCCESS) begin
// ... process file_data ...
end else begin
// Handle read error
end
end else begin
// Handle invalid file type
end
end
// ... other logic ...
end
end

endmodule
",
"class MyClass;
int myData;
// Other class members and methods go here

// Getter method to access myData
function int getMyData();
return myData;
endfunction
endclass

module top;
MyClass obj;
initial begin
obj = new;
// Access myData using the getter method
$display(""MyData value: %d"", obj.getMyData());
end
endmodule
",
"module proper_authorization_example;
string user_role;
string action;

initial begin
// Simulate user role (e.g., ""admin"", ""user"")
user_role = ""user""; // In this case, the user role is not an admin

// Simulate an action request (e.g., changing a setting)
action = ""change_setting"";

// Check authorization before performing the action
$display(""User role: %s"", user_role);
if (authorize(user_role, action)) begin
$display(""Performing action: %s"", action);
change_setting();
end else begin
$display(""Authorization failed: User role %s is not allowed to perform action %s"", user_role, action);
end
end

// Function to check authorization
function bit authorize(string role, string action);
// Only admin role is authorized to change settings
if (role == ""admin"" && action == ""change_setting"") begin
return 1;
end
return 0;
endfunction

// Hypothetical function to change a setting
function void change_setting();
// In a real scenario, this function would change some system setting
$display(""Setting changed successfully."");
endfunction
endmodule
",
"typedef enum {NOA, TIE_H, TIE_L} sig_type_t;
sig_type_t sig_type[8];
sig_type = new();

sig_type[0] = TIE_H; // This is OK


",
"class SharedResource;
int count;
semaphore sem;

function new();
count = 0;
sem = new(1); // Initialize semaphore with 1 token
endfunction

function void increment();
sem.get(1); // Acquire semaphore
count++;
sem.put(1); // Release semaphore
endfunction

function int get_count();
return count;
endfunction
endclass

module race_condition_example_fixed;
SharedResource shared_resource;

initial begin
shared_resource = new;

// Spawn multiple processes to increment the shared resource
fork
increment_task();
increment_task();
join

// Display the count
$display(""Final count: %0d"", shared_resource.get_count());
end

task increment_task();
int i;
for (i = 0; i < 1000; i++) begin
shared_resource.increment();
end
endtask
endmodule
",
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,